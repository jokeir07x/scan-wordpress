import sys
import re
import requests
from multiprocessing import Pool
from colorama import Fore

requests.packages.urllib3.disable_warnings()

fg = Fore.GREEN
fr = Fore.RED
fc = Fore.CYAN



ova = '''{}
           

   ▄▄▄         █               ▀                   ▄▄▄▄  ▄▄▄▄▄▄       
     █   ▄▄▄   █   ▄   ▄▄▄   ▄▄▄     ▄ ▄▄         ▄▀  ▀▄     █▀ ▄   ▄ 
     █  █▀ ▀█  █ ▄▀   █▀  █    █     █▀  ▀        █  ▄ █    ▄▀   █▄█  
     █  █   █  █▀█    █▀▀▀▀    █     █            █    █   ▄▀    ▄█▄  
 ▀▄▄▄▀  ▀█▄█▀  █  ▀▄  ▀█▄▄▀  ▄▄█▄▄   █             █▄▄█   ▄▀    ▄▀ ▀▄ 
                                                                                                          
           />_________________________________
[########[]_________________________________>
         \>  ✔️💯💲  HACKER of Morocco 🤡🤡 Anonymous Morocco 🇲🇦🇲🇦🇲🇦🇲🇦💯💯🤡🤡  💲 💯Fack 🤡🤡 Algeria💲 💯                                                         
                                                 

\n'''.format(fr)



headers = {
    'Connection': 'keep-alive',
    'Cache-Control': 'no-cache',
    'Upgrade-Insecure-Requests': '1',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36',
    'Accept': '*/*'
}

try:
    target = [i.strip() for i in open(sys.argv[1], mode='r').readlines()]
except IndexError:
    path = str(sys.argv[0]).split('\\')
    sys.exit('\n  [!] Enter <' + path[len(path) - 1] + '> <sites.txt>')

def get_url_with_protocol(url):
    return f'http://{URLdomain(url)}', f'https://{URLdomain(url)}'

def URLdomain(site):
    if site.startswith("http://"):
        site = site.replace("http://", "")
    elif site.startswith("https://"):
        site = site.replace("https://", "")
    else:
        pass
    pattern = re.compile('(.*)/')
    while re.findall(pattern, site):
        sitez = re.findall(pattern, site)
        site = sitez[0]
    return site

def scanner(url):
    try:

        plugins = [
            ('import-xml-feed', '/wp-content/plugins/import-xml-feed/readme.txt'),
            ('email-posts-to-subscribers', '/wp-content/plugins/email-posts-to-subscribers/readme.txt'),
            ('forminator', '/wp-content/plugins/forminator/readme.txt'),
            ('kadence-blocks', '/wp-content/plugins/kadence-blocks/readme.txt'),
            ('jupiterx-core', '/wp-content/plugins/jupiterx-core/readme.txt'),
            ('ht-mega-for-elementor', '/wp-content/plugins/ht-mega-for-elementor/readme.txt'),
            ('wp-post-author', '/wp-content/plugins/wp-post-author/readme.txt'),
            ('mstore-api', '/wp-content/plugins/mstore-api/readme.txt'),
            ('ultimate-member', '/wp-content/plugins/ultimate-member/readme.txt'),
            ('essential-addons-for-elementor-lite', '/wp-content/plugins/essential-addons-for-elementor-lite/readme.txt'),
            ('easy-digital-downloads', '/wp-content/plugins/easy-digital-downloads/readme.txt'),
            ('woocommerce-payments', '/wp-content/plugins/woocommerce-payments/readme.txt'),
            ('royal-elementor-addons', '/wp-content/plugins/royal-elementor-addons/readme.txt'),
            ('wp-email-capture', '/wp-content/plugins/wp-email-capture/readme.txt'),
            ('zendrop-dropshipping-and-fulfillment', '/wp-content/plugins/zendrop-dropshipping-and-fulfillment/readme.txt'),
            ('wp-sms', '/wp-content/plugins/wp-sms/readme.txt'),
            ('ninja-forms', '/wp-content/plugins/ninja-forms/readme.txt'),
        ]

        for plugin_name, plugin_path in plugins:
            for url_with_protocol in get_url_with_protocol(url):
                check = requests.get(url_with_protocol + plugin_path, headers=headers, verify=False, timeout=20)
                content = check.content.decode('utf-8')
                if 'Stable tag:' in content:
                    print(f' -| {url_with_protocol} --> {fg}[Successfully] {fc}[{plugin_name}]')
                    with open(f'{plugin_name}.txt', 'a') as file:
                        file.write(url_with_protocol + plugin_path + '\n')
                    break 

            else:
                print(f' -| {url_with_protocol} --> {fr}[Failed] {fc}[{plugin_name}]')

    except Exception as e:
        print(f' -| {url_with_protocol} --> {fr}[Failed] {fc}[{str(e)}]')


def main():
    print(ova)
    mp = Pool(50)
    mp.map(scanner, target)
    mp.close()
    mp.join()

    print(f'\n [!] {fc}Saved in txt')

if __name__ == "__main__":
    main()
    
